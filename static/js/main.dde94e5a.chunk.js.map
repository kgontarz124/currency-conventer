{"version":3,"sources":["components/Converter/ConverterView.tsx","components/Converter/index.tsx","actions/index.ts","actions/types.ts","hooks/useExchangeRatesData.ts","utils/apiBaseUrl.ts","hooks/useGetExchangeRate.ts","components/CurrencySelect.tsx","components/Error.tsx","components/LatestConversions/ListView.tsx","components/LatestConversions/BarView.tsx","components/LatestConversions/index.tsx","components/DatePicker.tsx","App.tsx","serviceWorker.ts","theme.ts","enhancers/monitorReducer.ts","middleware/logger.ts","reducers/index.ts","configureStore.ts","index.tsx"],"names":["ConverterView","result","amount","fromCurrency","toCurrency","currencyOptions","exchangeRate","currencySymbol","onChangeAmount","onChangeFromCurrency","onChangeToCurrency","onClickSwitch","classes","useStyles","className","converter","Typography","variant","component","TextField","id","label","type","InputLabelProps","shrink","textFiled","value","onChange","InputProps","inputProps","min","selectRow","onChangeCurrency","IconButton","color","onClick","makeStyles","createStyles","display","flexDirection","justifyContent","alignItems","width","height","margin","mapDispatchToProps","dispatch","onAddConversion","conversion","addConversion","Converter","connect","date","useState","setFromCurrency","setToCurrency","setCurrencyOptions","setAmount","setExchangeRate","setResult","isFromCurrency","setIsFromCurrency","symbols","currencySymbols","error","setError","getExchangeRatesData","a","axios","get","data","currencies","Object","keys","rates","baseCurrency","base","initialRate","Number","exchangeRatesDataError","useExchangeRatesData","getNewExchangeRate","newExchangeRate","newExchangeRateError","useGetExchangeRate","useEffect","handleChangeFromCurrency","event","newFromCurrency","target","handleChangeToCurrency","newToCurrency","from","to","convertedAt","Date","toLocaleDateString","toLocaleTimeString","CurrencySelect","FormControl","InputLabel","Select","labelId","name","map","option","MenuItem","key","Error","root","icon","marginRight","ListView","conversions","onDeleteConversion","length","noDataTextContainer","List","list","ListItem","role","undefined","dense","button","conversionInfoContainer","ListItemText","primary","conversionInfo","ArrowRightAlt","ListItemSecondaryAction","edge","aria-label","Delete","theme","overflowY","breakpoints","up","flex","padding","BarView","onDeleteAllConversions","Toolbar","Button","mapStateToProps","deleteConversion","LatestConversions","DatePicker","todayDate","onChangeDate","noValidate","datePicker","defaultValue","max","position","top","left","line","background","palette","main","App","today","getTime","getTimezoneOffset","toISOString","slice","setDate","Boolean","window","location","hostname","match","createMuiTheme","secondary","text","typography","fontFamily","fontSize","values","xs","sm","md","lg","xl","overrides","MuiFormLabel","MuiTypography","h3","h6","subtitle1","fontWeight","subtitle2","MuiToolbar","MuiListItemText","MuiButton","containedSecondary","backgroundColor","opacity","transition","monitorReducerEnhancer","createStore","reducer","initialState","enhancer","state","action","number","start","performance","now","newState","end","diff","Math","round","console","log","logger","store","next","group","info","getState","groupEnd","conversionsState","floor","random","filter","persistConfig","storage","middlewares","thunkMiddleware","loggerMiddleware","enhancers","applyMiddleware","monitorReducersEnhancer","composedEnhancers","compose","persistedReducer","persistReducer","rootReducer","persistor","persistStore","configureStore","ReactDOM","render","StrictMode","loading","CssBaseline","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.dde94e5a.chunk.js","sourcesContent":["import React from 'react';\nimport { SwapHoriz as SwitchIcon } from '@material-ui/icons';\n\nimport {\n  TextField,\n  makeStyles,\n  createStyles,\n  Typography,\n  IconButton,\n} from '@material-ui/core';\nimport { CurrencySelect } from '../../components';\n\ninterface ConverterViewProps {\n  result: number | null;\n  amount: number;\n  fromCurrency: string;\n  toCurrency: string;\n  currencyOptions: string[];\n  exchangeRate: number;\n  currencySymbol: string;\n  onChangeAmount: (event: React.ChangeEvent<{ value: unknown }>) => void;\n  onChangeFromCurrency: (event: React.ChangeEvent<{ value: unknown }>) => void;\n  onChangeToCurrency: (event: React.ChangeEvent<{ value: unknown }>) => void;\n  onClickSwitch: () => void;\n}\n\nexport const ConverterView: React.FC<ConverterViewProps> = ({\n  result,\n  amount,\n  fromCurrency,\n  toCurrency,\n  currencyOptions,\n  exchangeRate,\n  currencySymbol,\n  onChangeAmount,\n  onChangeFromCurrency,\n  onChangeToCurrency,\n  onClickSwitch,\n}) => {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.converter}>\n      <Typography variant='subtitle1' component='span'>\n        Exchange Rate\n      </Typography>\n      <Typography variant='subtitle2' component='span'>\n        {exchangeRate}\n      </Typography>\n      <Typography variant='h3' component='h1'>\n        {`${currencySymbol} ${result}`}\n      </Typography>\n\n      <TextField\n        id='outlined-number'\n        label='Amount'\n        type='number'\n        InputLabelProps={{\n          shrink: true,\n        }}\n        variant='outlined'\n        className={classes.textFiled}\n        value={amount}\n        onChange={onChangeAmount}\n        InputProps={{\n          inputProps: {\n            min: 0,\n          },\n        }}\n      />\n      <div className={classes.selectRow}>\n        <CurrencySelect\n          value={fromCurrency}\n          onChangeCurrency={onChangeFromCurrency}\n          label='From'\n          currencyOptions={currencyOptions}\n        />\n        <IconButton color='inherit' onClick={onClickSwitch}>\n          <SwitchIcon />\n        </IconButton>\n\n        <CurrencySelect\n          value={toCurrency}\n          onChangeCurrency={onChangeToCurrency}\n          label='To'\n          currencyOptions={currencyOptions}\n        />\n      </div>\n    </div>\n  );\n};\n\nconst useStyles = makeStyles(() =>\n  createStyles({\n    converter: {\n      display: 'flex',\n      flexDirection: 'column',\n      justifyContent: 'space-between',\n      alignItems: 'center',\n      width: 260,\n      height: 260,\n      margin: 'auto',\n    },\n    selectRow: {\n      display: 'flex',\n      justifyContent: 'space-between',\n      alignItems: 'center',\n      width: '100%',\n    },\n    textFiled: {\n      width: '100%',\n      margin: '30px 0 10px',\n    },\n  })\n);\n","import React, { useEffect, useState } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { useGetExchangeRate, useExchangeRatesData } from '../../hooks';\nimport { ConverterView } from './ConverterView';\nimport { Error } from '../../components';\nimport { Conversion } from '../../actions/types';\nimport { addConversion } from '../../actions';\nimport currencySymbols from '../../currencySymbols.json';\n\nconst mapDispatchToProps = (dispatch: any) => ({\n  onAddConversion: (conversion: Omit<Conversion, 'id'>) => {\n    dispatch(addConversion(conversion));\n  },\n});\n\nconst connector = connect(null, mapDispatchToProps);\ntype PropsFromRedux = ConnectedProps<typeof connector> & { date: string };\n\nconst ConverterContainer: React.FC<PropsFromRedux> = ({\n  onAddConversion,\n  date,\n}) => {\n  const [fromCurrency, setFromCurrency] = useState<string>('');\n  const [toCurrency, setToCurrency] = useState<string>('');\n  const [currencyOptions, setCurrencyOptions] = useState<string[]>([]);\n  const [amount, setAmount] = useState<number>(1);\n  const [exchangeRate, setExchangeRate] = useState<number>(0);\n  const [result, setResult] = useState<number | null>(null);\n  const [isFromCurrency, setIsFromCurrency] = useState<boolean>(true);\n  const symbols = currencySymbols as { [key: string]: string };\n\n  const { getExchangeRatesData, exchangeRatesDataError } = useExchangeRatesData(\n    date\n  );\n  const { getNewExchangeRate, newExchangeRateError } = useGetExchangeRate(date);\n\n  useEffect(() => {\n    (async () => {\n      const data = await getExchangeRatesData();\n      if (!data) {\n        return;\n      }\n      const { currencies, baseCurrency, initialRate } = data;\n      setCurrencyOptions([baseCurrency, ...currencies]);\n      setFromCurrency(baseCurrency);\n      setToCurrency(currencies[0]);\n      setExchangeRate(initialRate);\n    })();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [date]);\n\n  const handleChangeFromCurrency = async (\n    event: React.ChangeEvent<{ value: unknown }>\n  ) => {\n    const newFromCurrency = event.target.value as string;\n    setFromCurrency(newFromCurrency);\n    setIsFromCurrency(true);\n    const newExchangeRate = await getNewExchangeRate(\n      newFromCurrency,\n      toCurrency\n    );\n    setExchangeRate(newExchangeRate);\n  };\n\n  const handleChangeToCurrency = async (\n    event: React.ChangeEvent<{ value: unknown }>\n  ) => {\n    const newToCurrency = event.target.value as string;\n    setToCurrency(newToCurrency);\n    setIsFromCurrency(true);\n    const newExchangeRate = await getNewExchangeRate(\n      fromCurrency,\n      newToCurrency\n    );\n    setExchangeRate(newExchangeRate);\n  };\n\n  const handleChangeAmount = (event: React.ChangeEvent<{ value: unknown }>) => {\n    setAmount(event.target.value as number);\n  };\n\n  const countResult = () => {\n    if (isFromCurrency) {\n      return setResult(amount * exchangeRate);\n    }\n    return setResult(amount / exchangeRate);\n  };\n\n  const handleClickSwitch = () => {\n    setAmount(result || 0);\n    setIsFromCurrency(!isFromCurrency);\n    setFromCurrency(toCurrency);\n    setToCurrency(fromCurrency);\n  };\n\n  useEffect(() => {\n    if (!exchangeRate) {\n      return;\n    }\n    countResult();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isFromCurrency, amount, exchangeRate]);\n\n  useEffect(() => {\n    if (result === null) {\n      return;\n    }\n\n    onAddConversion({\n      from: `${amount} ${fromCurrency}`,\n      to: `${result} ${toCurrency}`,\n      convertedAt: `${new Date().toLocaleDateString()} ${new Date().toLocaleTimeString()}`,\n      date,\n    });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [result]);\n\n  if (exchangeRatesDataError || newExchangeRateError) {\n    return <Error />;\n  }\n\n  return (\n    <ConverterView\n      result={result || 0}\n      amount={amount}\n      fromCurrency={fromCurrency}\n      toCurrency={toCurrency}\n      currencyOptions={currencyOptions}\n      exchangeRate={exchangeRate}\n      currencySymbol={toCurrency ? symbols[toCurrency] : ''}\n      onChangeAmount={handleChangeAmount}\n      onChangeFromCurrency={handleChangeFromCurrency}\n      onChangeToCurrency={handleChangeToCurrency}\n      onClickSwitch={handleClickSwitch}\n    />\n  );\n};\n\nexport const Converter = connect(null, mapDispatchToProps)(ConverterContainer);\n","import {\n  ADD_CONVERSION,\n  DELETEALLCONVERSIONS,\n  Conversion,\n  ConversionActionTypes,\n  DELETECONVERSION,\n} from './types';\n\nexport function addConversion(\n  conversion: Omit<Conversion, 'id'>\n): ConversionActionTypes {\n  return { type: ADD_CONVERSION, conversion };\n}\n\nexport function deleteAllConversions(): ConversionActionTypes {\n  return { type: DELETEALLCONVERSIONS };\n}\n\nexport function deleteConversion(id: number): ConversionActionTypes {\n  return { type: DELETECONVERSION, id };\n}\n","export const ADD_CONVERSION = 'ADD_CONVERSION';\nexport const DELETEALLCONVERSIONS = 'DELETEALLCONVERSIONS';\nexport const DELETECONVERSION = 'DELETECONVERSION';\n\nexport interface Conversion {\n  id: number;\n  from: string;\n  to: string;\n  convertedAt: string;\n  date: string;\n}\n\nexport interface AddConversionAction {\n  type: typeof ADD_CONVERSION;\n  conversion: Omit<Conversion, 'id'>;\n}\n\nexport interface DeleteAllConversionsAction {\n  type: typeof DELETEALLCONVERSIONS;\n}\n\nexport interface DeleteConversionAction {\n  type: typeof DELETECONVERSION;\n  id: number;\n}\n\nexport type ConversionActionTypes =\n  | AddConversionAction\n  | DeleteAllConversionsAction\n  | DeleteConversionAction;\n","import axios from 'axios';\nimport { API_BASE_URL } from '../utils';\nimport { useState } from 'react';\nimport { ExchangeRatesData } from '../types';\n\nexport const useExchangeRatesData = (date: string) => {\n  const [error, setError] = useState<boolean>(false);\n\n  const getExchangeRatesData = async () => {\n    try {\n      const { data } = (await axios.get(\n        `${API_BASE_URL}/${date}`\n      )) as ExchangeRatesData;\n      const currencies = Object.keys(data?.rates);\n      const baseCurrency = data?.base;\n      const initialRate = Number(data?.rates[currencies[0]]);\n      return { currencies, baseCurrency, initialRate };\n    } catch (e) {\n      setError(true);\n    }\n  };\n  return { getExchangeRatesData, exchangeRatesDataError: error };\n};\n","export const API_BASE_URL = 'https://api.exchangeratesapi.io';\n","import axios from 'axios';\nimport { API_BASE_URL } from '../utils';\nimport { useState } from 'react';\nimport { ExchangeRatesData } from '../types';\n\nexport const useGetExchangeRate = (date: string) => {\n  const [error, setError] = useState<boolean>(false);\n  const getNewExchangeRate = async (\n    fromCurrency: string,\n    toCurrency: string\n  ) => {\n    let newExchangeRate;\n    if (fromCurrency === toCurrency) {\n      return 1;\n    }\n    try {\n      const { data } = (await axios.get(\n        `${API_BASE_URL}/${date}?base=${fromCurrency}&symbols=${toCurrency}`\n      )) as ExchangeRatesData;\n      newExchangeRate = Number(data?.rates[toCurrency]);\n    } catch (e) {\n      setError(true);\n    }\n    return newExchangeRate || 0;\n  };\n  return { getNewExchangeRate, newExchangeRateError: error };\n};\n","import React, { ChangeEvent } from 'react';\nimport { FormControl, InputLabel, Select, MenuItem } from '@material-ui/core';\n\ninterface CurrencySelectProps {\n  value: string;\n  onChangeCurrency: (event: React.ChangeEvent<{ value: unknown }>) => void;\n  label: string;\n  currencyOptions: string[];\n}\n\nexport const CurrencySelect: React.FC<CurrencySelectProps> = ({\n  value,\n  onChangeCurrency,\n  label,\n  currencyOptions,\n}) => (\n  <FormControl variant='outlined'>\n    <InputLabel id='currency-select'>{label}</InputLabel>\n    <Select\n      labelId='currency-select'\n      id='currency-select'\n      value={value}\n      onChange={onChangeCurrency}\n      name='from'\n      label={label}\n    >\n      {currencyOptions.map((option) => (\n        <MenuItem key={option} value={option}>\n          {option}\n        </MenuItem>\n      ))}\n    </Select>\n  </FormControl>\n);\n","import React from 'react';\nimport { Typography, createStyles, makeStyles } from '@material-ui/core';\nimport { Error as ErrorIcon } from '@material-ui/icons';\n\nexport const Error = () => {\n  const classes = useStyles();\n  return (\n    <div className={classes.root}>\n      <ErrorIcon color='error' className={classes.icon} />\n      <Typography variant='h5' component='h1'>\n        Ups! Something went wrong :(\n      </Typography>\n    </div>\n  );\n};\n\nconst useStyles = makeStyles(() =>\n  createStyles({\n    root: {\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n      margin: '0 20px',\n    },\n    icon: {\n      marginRight: 10,\n    },\n  })\n);\n","import React from 'react';\nimport {\n  List,\n  ListItem,\n  ListItemText,\n  makeStyles,\n  createStyles,\n  Typography,\n  ListItemSecondaryAction,\n  IconButton,\n} from '@material-ui/core';\nimport { PropsFromRedux } from '.';\nimport { Conversion } from '../../actions/types';\nimport {\n  ArrowRightAlt as ArrowRightAltIcon,\n  Delete as DeleteIcon,\n} from '@material-ui/icons';\n\ntype ListViewProps = Omit<PropsFromRedux, 'onDeleteAllConversions'>;\n\nexport const ListView: React.FC<ListViewProps> = ({\n  conversions,\n  onDeleteConversion,\n}) => {\n  const classes = useStyles();\n\n  if (conversions.length < 1) {\n    return (\n      <div className={classes.noDataTextContainer}>\n        <Typography variant='subtitle1' component='span'>\n          There are not any conversions\n        </Typography>\n      </div>\n    );\n  }\n\n  return (\n    <List className={classes.list}>\n      {conversions.map(({ id, from, to, convertedAt, date }: Conversion) => {\n        const labelId = `checkbox-list-label-${id}`;\n        const onDelete = () => onDeleteConversion(id);\n\n        return (\n          <ListItem key={id} role={undefined} dense button>\n            <div className={classes.conversionInfoContainer}>\n              <ListItemText\n                id={labelId}\n                primary={\n                  <>\n                    <Typography variant='subtitle1' component='span'>\n                      Created At:\n                    </Typography>\n                    &nbsp;{convertedAt}\n                  </>\n                }\n              />\n              <ListItemText\n                id={labelId}\n                primary={\n                  <>\n                    <Typography variant='subtitle1' component='span'>\n                      For Date:\n                    </Typography>\n                    &nbsp;{date}\n                  </>\n                }\n              />\n              <ListItemText\n                id={labelId}\n                primary={\n                  <div className={classes.conversionInfo}>\n                    {from}\n                    <ArrowRightAltIcon color='primary' />\n                    {to}\n                  </div>\n                }\n              />\n            </div>\n\n            <ListItemSecondaryAction>\n              <IconButton edge='end' aria-label='delete' onClick={onDelete}>\n                <DeleteIcon />\n              </IconButton>\n            </ListItemSecondaryAction>\n          </ListItem>\n        );\n      })}\n    </List>\n  );\n};\n\nconst useStyles = makeStyles((theme) =>\n  createStyles({\n    list: {\n      width: '100%',\n      height: '35vh',\n      overflowY: 'scroll',\n    },\n    conversionInfoContainer: {\n      [theme.breakpoints.up('lg')]: {\n        display: 'flex',\n        flex: 1,\n      },\n    },\n    conversionInfo: {\n      display: 'flex',\n      alignItems: 'center',\n    },\n    noDataTextContainer: {\n      padding: '16px 0 0 16px',\n    },\n  })\n);\n","import React from 'react';\nimport { Typography, Toolbar, Button } from '@material-ui/core';\nimport { PropsFromRedux } from '.';\n\ntype ListViewProps = Omit<PropsFromRedux, 'conversions' | 'onDeleteConversion'>;\n\nexport const BarView: React.FC<ListViewProps> = ({\n  onDeleteAllConversions,\n}) => (\n  <Toolbar>\n    <Typography variant='h6' component='h2'>\n      Latest conversions\n    </Typography>\n    <Button\n      variant='contained'\n      color='secondary'\n      onClick={onDeleteAllConversions}\n    >\n      Delete all\n    </Button>\n  </Toolbar>\n);\n","import React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { ListView } from './ListView';\nimport { deleteAllConversions, deleteConversion } from '../../actions';\nimport { State } from '../../reducers';\nimport { BarView } from './BarView';\nimport { makeStyles, createStyles } from '@material-ui/core';\n\nconst mapStateToProps = ({ conversions }: State) => ({ conversions });\n\nconst mapDispatchToProps = (dispatch: any) => {\n  return {\n    onDeleteAllConversions: () => {\n      dispatch(deleteAllConversions());\n    },\n    onDeleteConversion: (id: number) => {\n      dispatch(deleteConversion(id));\n    },\n  };\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\nexport type PropsFromRedux = ConnectedProps<typeof connector>;\n\nconst LatestConversionsContainer: React.FC<PropsFromRedux> = ({\n  conversions,\n  onDeleteAllConversions,\n  onDeleteConversion,\n}) => {\n  const classes = useStyles();\n  return (\n    <div className={classes.root}>\n      <BarView onDeleteAllConversions={onDeleteAllConversions} />\n      <ListView\n        conversions={conversions}\n        onDeleteConversion={onDeleteConversion}\n      />\n    </div>\n  );\n};\n\nconst useStyles = makeStyles(() =>\n  createStyles({\n    root: {\n      width: '100%',\n      height: '45vh',\n    },\n  })\n);\n\nexport const LatestConversions = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(LatestConversionsContainer);\n","import React from 'react';\nimport { TextField, makeStyles, createStyles } from '@material-ui/core';\n\ninterface DatePickerProps {\n  date: string;\n  todayDate: string;\n  onChangeDate: (event: React.ChangeEvent<HTMLInputElement>) => void;\n}\n\nexport const DatePicker: React.FC<DatePickerProps> = ({\n  date,\n  todayDate,\n  onChangeDate,\n}) => {\n  const classes = useStyles();\n  return (\n    <form noValidate className={classes.datePicker}>\n      <TextField\n        id='date'\n        label='Choose Date'\n        type='date'\n        defaultValue={date}\n        onChange={onChangeDate}\n        InputLabelProps={{\n          shrink: true,\n        }}\n        InputProps={{\n          inputProps: {\n            min: '2000-01-01',\n            max: todayDate,\n          },\n        }}\n      />\n    </form>\n  );\n};\nconst useStyles = makeStyles((theme) =>\n  createStyles({\n    datePicker: {\n      position: 'absolute',\n      top: 20,\n      left: 20,\n    },\n  })\n);\n","import React, { useState } from 'react';\nimport { makeStyles, createStyles } from '@material-ui/core';\n\nimport { Converter, LatestConversions, DatePicker } from './components';\n\nconst App = () => {\n  var today = new Date();\n  var isoDateTime = new Date(\n    today.getTime() - today.getTimezoneOffset() * 60000\n  ).toISOString();\n  const todayDate = isoDateTime.slice(0, 10);\n  const [date, setDate] = useState(todayDate);\n  const classes = useStyles();\n  const handleChangeDate = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setDate(event.target.value);\n  };\n  return (\n    <div className={classes.root}>\n      <div className={classes.line} />\n      <DatePicker\n        date={date}\n        onChangeDate={handleChangeDate}\n        todayDate={todayDate}\n      />\n      <Converter date={date} />\n      <LatestConversions />\n    </div>\n  );\n};\n\nconst useStyles = makeStyles((theme) =>\n  createStyles({\n    root: {\n      margin: 0,\n      padding: 0,\n      width: '100%',\n      height: '100vh',\n      display: 'flex',\n      justifyContent: 'space-between',\n      alignItems: 'center',\n      flexDirection: 'column',\n      position: 'relative',\n    },\n    line: {\n      width: '100%',\n      height: 5,\n      background: theme.palette.primary.main,\n    },\n  })\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { createMuiTheme } from '@material-ui/core/styles';\n\nexport const theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: '#519D9E',\n    },\n    secondary: {\n      main: '#FBFBFB',\n    },\n    text: {\n      primary: '#343838',\n    },\n  },\n  typography: {\n    fontFamily: '\"Roboto\", arial, sans-serif',\n    fontSize: 14,\n  },\n  breakpoints: {\n    values: {\n      xs: 0,\n      sm: 475,\n      md: 600,\n      lg: 900,\n      xl: 1440,\n    },\n  },\n  overrides: {\n    MuiFormLabel: {\n      root: {\n        color: '#519D9E',\n      },\n    },\n    MuiTypography: {\n      h3: {\n        width: 'max-content',\n        fontSize: '1.8rem',\n        '@media(min-width: 600px)': {\n          fontSize: '3rem',\n        },\n      },\n      h6: {\n        color: '#fff',\n      },\n      subtitle1: {\n        fontWeight: 'lighter',\n        color: '#519D9E',\n      },\n      subtitle2: {\n        fontWeight: 'lighter',\n        fontSize: '0.775rem',\n      },\n    },\n    MuiToolbar: {\n      root: {\n        width: '100%',\n        background: '#519D9E',\n        display: 'flex',\n        justifyContent: 'space-between',\n      },\n    },\n    MuiListItemText: {\n      root: {\n        width: '100%',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'flex-start',\n      },\n    },\n    MuiButton: {\n      containedSecondary: {\n        color: '#519D9E',\n        '&:hover': {\n          backgroundColor: '#fff',\n          opacity: 0.8,\n          transition: 'all 0.3s',\n        },\n      },\n    },\n  },\n});\n","const round = (number: any) => Math.round(number * 100) / 100;\n\nconst monitorReducerEnhancer = (createStore: any) => (\n  reducer: any,\n  initialState: any,\n  enhancer: any\n) => {\n  const monitoredReducer = (state: any, action: any) => {\n    const start = performance.now();\n    const newState = reducer(state, action);\n    const end = performance.now();\n    const diff = round(end - start);\n\n    console.log('reducer process time:', diff);\n\n    return newState;\n  };\n\n  return createStore(monitoredReducer, initialState, enhancer);\n};\n\nexport default monitorReducerEnhancer;\n","const logger = (store: any) => (next: any) => (action: any) => {\n  console.group(action.type);\n  console.info('dispatching', action);\n  let result = next(action);\n  console.log('next state', store.getState());\n  console.groupEnd();\n  return result;\n};\n\nexport default logger;\n","import { Conversion } from '../actions/types';\n\nexport interface State {\n  conversions: any;\n}\n\nconst initialState: State = {\n  conversions: [],\n};\n\nconst conversionsState = (state = initialState, action: any) => {\n  switch (action.type) {\n    case 'ADD_CONVERSION':\n      return {\n        conversions: [\n          { ...action.conversion, id: Math.floor(Math.random() * 100000) },\n          ...state.conversions,\n        ],\n      };\n    case 'DELETEALLCONVERSIONS':\n      return {\n        conversions: [],\n      };\n    case 'DELETECONVERSION':\n      return {\n        conversions: [\n          ...state.conversions.filter(\n            (conversion: Conversion) => conversion.id !== action.id\n          ),\n        ],\n      };\n    default:\n      return state;\n  }\n};\n\nexport default conversionsState;\n","import { applyMiddleware, compose, createStore } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport { persistStore, persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\n\nimport monitorReducersEnhancer from './enhancers/monitorReducer';\nimport loggerMiddleware from './middleware/logger';\nimport rootReducer from './reducers';\n\nconst persistConfig = {\n  key: 'root',\n  storage,\n};\n\nexport default function configureStore() {\n  const middlewares = [thunkMiddleware, loggerMiddleware];\n  const middlewareEnhancer = applyMiddleware(...middlewares);\n\n  const enhancers = [middlewareEnhancer, monitorReducersEnhancer];\n  const composedEnhancers = compose(...enhancers) as any;\n  const persistedReducer = persistReducer(persistConfig, rootReducer);\n\n  const store = createStore(persistedReducer, composedEnhancers);\n  let persistor = persistStore(store);\n  return { store, persistor };\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { MuiThemeProvider, CssBaseline } from '@material-ui/core';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { theme } from './theme';\nimport configureStore from './configureStore';\n\nconst { store, persistor } = configureStore();\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <MuiThemeProvider theme={theme}>\n          <CssBaseline />\n          <App />\n        </MuiThemeProvider>\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}